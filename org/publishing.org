#+TITLE: Publishing

This wiki is published with emacs Org-mode and stored in a git
repository.

#+begin_src emacs-lisp
  (setf *root* "~/shared/wfiles/climate/vision/wiki/")

  (setf *vision-wiki-html*
    `("vision-wiki-html"
      :base-directory ,(expand-file-name (concat *root* "org/"))
      :base-extension "org"
      :publishing-directory ,(expand-file-name (concat *root* "docs/"))
      :publishing-function org-html-publish-to-html
      :headline-levels 3
      :section-numbers nil
      :with-toc nil
      :auto-sitemap t
      :makeindex t
      :html-head "<link rel=\"stylesheet\"
                    href=\"../files/style.css\" type=\"text/css\"/>"
      :html-preamble t))

  (setf *vision-wiki-files*
    `("vision-wiki-files"
      :base-directory ,(expand-file-name (concat *root* "files/"))
      :base-extension "jpg\\|gif\\|png\\|pdf"
      :publishing-directory ,(expand-file-name (concat *root* "docs/files/"))
      :publishing-function org-publish-attachment))

  (setf *vision-wiki-website* '("vision-wiki" :components ("vision-wiki-html" "vision-wiki-files")))

  (defun register-vision-wiki ()
    (interactive)
    (let ((existing-html (find (first *vision-wiki-html*) org-publish-project-alist :key 'first :test 'equal))
	  (existing-files (find (first *vision-wiki-files*) org-publish-project-alist :key 'first :test 'equal))
	  (existing-website (find (first *vision-wiki-website*) org-publish-project-alist :key 'first :test 'equal)))
      (setf org-publish-project-alist
	    (append
	     (remove existing-website
		     (remove existing-files
			     (remove existing-html org-publish-project-alist)))
	     (list *vision-wiki-html*
		   ,*vision-wiki-files*
		   ,*vision-wiki-website*)))))
#+end_src

* Other Publishing Ideas

** Website

I think I'll just publish my DEFT collection as a project. Then it'll
be up to date most of the time. Put a GIT repo on it and others can
access it if they want too.

** Reports

Reports are harder. I like latex, but others probably don't so much.  Still,
for what we're trying to do it might be valuable.

** Presentations

Harder still. Latex presentations are not wonderful and not interactive... might
want to look at one of those website based presentation tools.

reveal.js looks great.
impress.js and hovercraft look great...

How do newspapers do those interactive things?  It's called 'storytelling'.
Google javascript storytelling library.

https://geoviz.ceoas.oregonstate.edu/storymap/

https://pudding.cool/process/how-to-implement-scrollytelling/demo/waypoints/

https://pudding.cool/process/how-to-implement-scrollytelling/

This one recommends a 'stepper'.
https://eagereyes.org/blog/2016/the-scrollytelling-scourge

** Videos

To be determined.
