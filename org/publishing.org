#+TITLE: Publishing

This wiki is published with emacs Org-mode and stored in a git
repository.

#+begin_src emacs-lisp
  (setf *root* "~/shared/wfiles/climate/vision/wiki/")

  (setf *vision-wiki-html*
    `("vision-wiki-html"
      :base-directory ,(expand-file-name (concat *root* "org/"))
      :base-extension "org"
      :publishing-directory ,(expand-file-name (concat *root* "docs/"))
      :publishing-function org-html-publish-to-html
      :headline-levels 3
      :section-numbers nil
      :with-toc nil
      :auto-sitemap t
      :makeindex t
      :html-head "<link rel=\"stylesheet\"
                    href=\"../files/style.css\" type=\"text/css\"/>"
      :html-preamble t))

  (setf *vision-wiki-files*
    `("vision-wiki-files"
      :base-directory ,(expand-file-name (concat *root* "files/"))
      :base-extension "jpg\\|gif\\|png\\|pdf"
      :publishing-directory ,(expand-file-name (concat *root* "docs/files/"))
      :publishing-function org-publish-attachment))

  (setf *vision-wiki-website* '("vision-wiki" :components ("vision-wiki-html" "vision-wiki-files")))

  (defun register-vision-wiki ()
    (interactive)
    (let ((existing-html (find (first *vision-wiki-html*) org-publish-project-alist :key 'first :test 'equal))
	  (existing-files (find (first *vision-wiki-files*) org-publish-project-alist :key 'first :test 'equal))
	  (existing-website (find (first *vision-wiki-website*) org-publish-project-alist :key 'first :test 'equal)))
      (setf org-publish-project-alist
	    (append
	     (remove existing-website
		     (remove existing-files
			     (remove existing-html org-publish-project-alist)))
	     (list *vision-wiki-html*
		   ,*vision-wiki-files*
		   ,*vision-wiki-website*)))))
#+end_src

* Products

I want to produce a series of interactive websites. Video,
presentations, slide decks, and summary reports are lower priority,
and would feature artifacts from the website.

The websites feature scrollytelling and data exploration. To guide the
user through the problems and solutions of local climate crisis
adaptation.

For the websites, I would like to try using Elm. If that doesn't work,
then there are many javascript libraries.

** Production Process

 1. Define the scope of interest -- the boundaries of the problem
    space or the impacts and knock-on effects of a solution.
 2. Identify relevant data, favoring government sources
 3. Acquire the data and plot the highlights, Identify a few standout trends, if any.
 4. Mind map the scope and data. What relates to what, what data or models are missing?
 5. Timeline the lesson.  What is the right ordering for the concepts for the learner.
 6. Relate the mind map to the timeline.
 7. Story-board the website - What are we communicating. What data helps that. What visualization and calculators are best?
 8. Mock up the website. Brief sentences in place, logic, flow. Don't worry about making the text readable, nor the graphics best possible, nor the website complete.
 9. Polish continually. Get help editing the text. Get help from a designer to improve the website.  Test the website on users.

** References

reveal.js looks great.
impress.js and hovercraft look great...

How do newspapers do those interactive things?  It's called 'storytelling'.
Google javascript storytelling library.

https://geoviz.ceoas.oregonstate.edu/storymap/

https://pudding.cool/process/how-to-implement-scrollytelling/demo/waypoints/

https://pudding.cool/process/how-to-implement-scrollytelling/

This one recommends a 'stepper'.
https://eagereyes.org/blog/2016/the-scrollytelling-scourge

Another to look at is http://worrydream.com/ClimateChange/ ... he has a library that lets calculations be exposed to the user so they can play with the numbers themselves.

Rather than use WorryDreams 'tangle' library... maybe Elm and
https://github.com/preignition/multi-verse ... or elm and d3?  Elm is
a reactive language, so that should make most of this reaction stuff
come about pretty easily.  Alternatively, Bacon and d3 https://blog.scottlogic.com/2014/07/23/frp-with-bacon-and-d3.html
